<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端网络请求一文详解</title>
      <link href="/2022/06/23/qian-duan-wang-luo-qing-qiu-yi-wen-xiang-jie/"/>
      <url>/2022/06/23/qian-duan-wang-luo-qing-qiu-yi-wen-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="网络请求，我们关注什么？"><a href="#网络请求，我们关注什么？" class="headerlink" title="网络请求，我们关注什么？"></a>网络请求，我们关注什么？</h1><p>在一次网络请求中，我们可能会对如下这些点比较关注：</p><ul><li>URL，即请求路径</li><li>请求方式，如GET&#x2F;POST&#x2F;…</li><li>设置请求头</li><li>携带cookie</li><li>跨域</li><li>如何处理响应，包括响应头、响应状态码、响应体</li><li>异常处理</li></ul><h1 id="如何进行一次网络请求？"><a href="#如何进行一次网络请求？" class="headerlink" title="如何进行一次网络请求？"></a>如何进行一次网络请求？</h1><p>我们都有哪些方法可以发送网络请求：</p><ul><li>form表单提交</li><li>Ajax</li><li>JQuery</li><li>fetch</li><li>Axios等网络请求库</li></ul><h1 id="Ajax是什么？"><a href="#Ajax是什么？" class="headerlink" title="Ajax是什么？"></a>Ajax是什么？</h1><p>Ajax全称Asynchronous JavaScript And XML（异步的JavaScript和XML）</p><h2 id="Ajax解决了什么问题？"><a href="#Ajax解决了什么问题？" class="headerlink" title="Ajax解决了什么问题？"></a>Ajax解决了什么问题？</h2><p>在Ajax出现之前，任何与服务器的交互——想象一下你在掘金社区某篇文章下点个赞——都会触发刷新页面，用户体验可想而知</p><p>Ajax就是<strong>局部刷新页面</strong>的技术的统称，其中XMLHttpRequest是常用的实现Ajax的方案</p><h2 id="XMLHttpRequest实现Ajax"><a href="#XMLHttpRequest实现Ajax" class="headerlink" title="XMLHttpRequest实现Ajax"></a>XMLHttpRequest实现Ajax</h2><p>以POST请求为例，使用方式如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* 创建XMLHttpRequest实例对象 */</span><span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* open()用于初始化一个请求 */</span><span class="token comment" spellcheck="true">/* 参数：请求方式, 请求URL, 是否异步发送请求 */</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> <span class="token string">'www.xxx.com'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 设置请求头 */</span><span class="token comment" spellcheck="true">/* 参数：请求头字段名, 请求头字段值 */</span>xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-type"</span><span class="token punctuation">,</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 异常处理，这里的异常并不包括诸如状态码4xx等成功收到响应情况 */</span>xhr<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Network request failed'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 当跨域时是否携带cookie */</span>xhr<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* * xhr的readyState属性有5个值，分别对应由发起请求到响应完成过程中的5个状态： *   0：未初始化状态，尚未调用open() *   1：启动状态，已调用open()，尚未调用send() *   2：发送状态，已调用send()，尚未收到响应 *   3：接收状态，已经收到部分响应数据 *   4：完成状态，已经收到全部响应数据*/</span><span class="token comment" spellcheck="true">/* 每次状态改变，xhr.readyState的值都会做相应更新，且触发一次xhr.onreadystatechange */</span>xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* xhr.status获取http状态码 */</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">304</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 请求成功 */</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 处理请求参数 */</span>postData <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"name1"</span><span class="token punctuation">:</span> <span class="token string">"value1"</span><span class="token punctuation">,</span>    <span class="token string">"name2"</span><span class="token punctuation">:</span> <span class="token string">"value2"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>postData <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> dataString <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        dataString <span class="token operator">+</span><span class="token operator">=</span> key <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> value<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"&amp;"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dataString<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* send()用于发出请求 */</span><span class="token comment" spellcheck="true">/* 参数：请求体中的信息（不传也需要传null） */</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>下图列出了XMLHttpRequest的属性、函数、事件和异常处理，感兴趣的可以自行深入了解</p></blockquote><img src="/2022/06/23/qian-duan-wang-luo-qing-qiu-yi-wen-xiang-jie/1655958258535.png" class="" width="1655958258535"><h1 id="JQuery对Ajax的封装"><a href="#JQuery对Ajax的封装" class="headerlink" title="JQuery对Ajax的封装"></a>JQuery对Ajax的封装</h1><p>本人不会JQuery，也不打算学了，就跳过啦(︶.̮︶✽)</p><h1 id="fetch：XMLHttpRequest的替代品"><a href="#fetch：XMLHttpRequest的替代品" class="headerlink" title="fetch：XMLHttpRequest的替代品"></a>fetch：XMLHttpRequest的替代品</h1><blockquote><p>Fetch API是一个用于访问和操纵HTTP管道的强大的原生API。</p></blockquote><p>（2022&#x2F;6&#x2F;23：日后补充（maybe））</p><h1 id="网络请求库Axios"><a href="#网络请求库Axios" class="headerlink" title="网络请求库Axios"></a>网络请求库Axios</h1><p>Axios 是一个<strong>基于Promise的网络请求库</strong>，对原生的XMLHttpRequest做了封装，可以用于浏览器和node.js。</p><p><a href="https://www.axios-http.cn/docs/intro">Axios官网教程</a></p><h2 id="Axios的基本使用"><a href="#Axios的基本使用" class="headerlink" title="Axios的基本使用"></a>Axios的基本使用</h2><p>GET请求的使用方式如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* 导入axios对象 */</span><span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'axios'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 发起GET请求 */</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user?ID=12345'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 处理成功情况</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 处理错误情况</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 总是会执行</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 第二种GET请求方式 */</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    params<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      ID<span class="token punctuation">:</span> <span class="token number">12345</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 总是会执行</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 支持async/await用法 */</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user?ID=12345'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>POST请求的使用方式如下：</p><pre class=" language-javascript"><code class="language-javascript">axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    firstName<span class="token punctuation">:</span> <span class="token string">'Fred'</span><span class="token punctuation">,</span>    lastName<span class="token punctuation">:</span> <span class="token string">'Flintstone'</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="项目中为什么要封装axios？"><a href="#项目中为什么要封装axios？" class="headerlink" title="项目中为什么要封装axios？"></a>项目中为什么要封装axios？</h2><p>大型项目中：</p><ul><li>http请求很多</li><li>需要区分环境</li><li>需要对所有请求做某些统一处理</li></ul><p><strong>为了避免代码冗余，增强项目的可维护性和拓展性</strong>，需要对axios做一层封装</p><h2 id="项目中如何封装axios？"><a href="#项目中如何封装axios？" class="headerlink" title="项目中如何封装axios？"></a>项目中如何封装axios？</h2><p>（2022&#x2F;6&#x2F;23：日后补充）<br><a href="https://juejin.cn/post/6999932338566070308#heading-5">参考资料</a></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// src/utils/https.js</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">import</span> qs <span class="token keyword">from</span> <span class="token string">'qs'</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> debounce <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'./debounce'</span><span class="token keyword">const</span> contentTypes <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  json<span class="token punctuation">:</span> <span class="token string">'application/json; charset=utf-8'</span><span class="token punctuation">,</span>  urlencoded<span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded; charset=utf-8'</span><span class="token punctuation">,</span>  multipart<span class="token punctuation">:</span> <span class="token string">'multipart/form-data'</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">toastMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>errorMsgObj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">delete</span> errorMsgObj<span class="token punctuation">[</span>item<span class="token punctuation">]</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> errorMsgObj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> defaultOptions <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  withCredentials<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 允许把cookie传递到后台</span>  headers<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Accept<span class="token punctuation">:</span> <span class="token string">'application/json'</span><span class="token punctuation">,</span>    <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> contentTypes<span class="token punctuation">.</span>json<span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  timeout<span class="token punctuation">:</span> <span class="token number">15000</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 对外暴露callApi */</span><span class="token keyword">export</span> <span class="token keyword">const</span> callApi <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  url<span class="token punctuation">,</span>  data <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  method <span class="token operator">=</span> <span class="token string">'get'</span><span class="token punctuation">,</span>  options <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  contentType <span class="token operator">=</span> <span class="token string">'json'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// json || urlencoded || multipart</span>  prefixUrl <span class="token operator">=</span> <span class="token string">'api'</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>url<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请传入url'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> fullUrl <span class="token operator">=</span> <span class="token template-string"><span class="token string">`/$&amp;#123;prefixUrl&amp;#125;/$&amp;#123;url&amp;#125;`</span></span>  <span class="token keyword">const</span> newOptions <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">...</span>defaultOptions<span class="token punctuation">,</span>    <span class="token operator">...</span>options<span class="token punctuation">,</span>    headers<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token string">'Content-Type'</span><span class="token punctuation">:</span>        <span class="token punctuation">(</span>options<span class="token punctuation">.</span>headers <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span>        contentTypes<span class="token punctuation">[</span>contentType<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    method<span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'get'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    newOptions<span class="token punctuation">.</span>params <span class="token operator">=</span> data  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">!==</span> <span class="token string">'get'</span> <span class="token operator">&amp;&amp;</span> method <span class="token operator">!==</span> <span class="token string">'head'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    newOptions<span class="token punctuation">.</span>data <span class="token operator">=</span> data    <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token keyword">instanceof</span> <span class="token class-name">FormData</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      newOptions<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token string">'x-requested-with'</span><span class="token punctuation">:</span> <span class="token string">'XMLHttpRequest'</span><span class="token punctuation">,</span>        <span class="token string">'cache-control'</span><span class="token punctuation">:</span> <span class="token string">'no-cache'</span><span class="token punctuation">,</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newOptions<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">===</span> contentTypes<span class="token punctuation">.</span>urlencoded<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      newOptions<span class="token punctuation">.</span>data <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>          data<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span>          data<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">===</span> undefined <span class="token operator">||</span>          data<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">''</span>        <span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">delete</span> data<span class="token punctuation">[</span>item<span class="token punctuation">]</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 没有必要，因为axios会将JavaScript对象序列化为JSON</span>      <span class="token comment" spellcheck="true">// newOptions.data = JSON.stringify(data);</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 移除起始部分 / 所有请求url走相对路径</span>    request<span class="token punctuation">.</span>url <span class="token operator">=</span> request<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^\//</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> request  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">axios</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    url<span class="token punctuation">:</span> fullUrl<span class="token punctuation">,</span>    <span class="token operator">...</span>newOptions<span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> data <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> response      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">'xxx'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 与服务端约定</span>        <span class="token comment" spellcheck="true">// 登录校验失败</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">'xxx'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 与服务端约定</span>        <span class="token comment" spellcheck="true">// 无权限</span>        router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> path<span class="token punctuation">:</span> <span class="token string">'/403'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">'xxx'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 与服务端约定</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> message <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> data        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>errorMsgObj<span class="token punctuation">[</span>message<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          errorMsgObj<span class="token punctuation">[</span>message<span class="token punctuation">]</span> <span class="token operator">=</span> message        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token function">debounce</span><span class="token punctuation">(</span>toastMsg<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> data <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> error<span class="token punctuation">.</span>response        <span class="token keyword">const</span> resCode <span class="token operator">=</span> data<span class="token punctuation">.</span>status        <span class="token keyword">const</span> resMsg <span class="token operator">=</span> data<span class="token punctuation">.</span>message <span class="token operator">||</span> <span class="token string">'服务异常'</span>        <span class="token comment" spellcheck="true">// if (resCode === 401) &amp;#123; // 与服务端约定</span>        <span class="token comment" spellcheck="true">//     // 登录校验失败</span>        <span class="token comment" spellcheck="true">// &amp;#125; else if (data.code === 403) &amp;#123; // 与服务端约定</span>        <span class="token comment" spellcheck="true">//     // 无权限</span>        <span class="token comment" spellcheck="true">//     router.replace(&amp;#123; path: '/403' &amp;#125;)</span>        <span class="token comment" spellcheck="true">// &amp;#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>errorMsgObj<span class="token punctuation">[</span>resMsg<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          errorMsgObj<span class="token punctuation">[</span>resMsg<span class="token punctuation">]</span> <span class="token operator">=</span> resMsg        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token function">debounce</span><span class="token punctuation">(</span>toastMsg<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> err <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> code<span class="token punctuation">:</span> resCode<span class="token punctuation">,</span> respMsg<span class="token punctuation">:</span> resMsg <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> err <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> type<span class="token punctuation">:</span> <span class="token string">'canceled'</span><span class="token punctuation">,</span> respMsg<span class="token punctuation">:</span> <span class="token string">'数据请求超时'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 网络请求 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Axios </tag>
            
            <tag> Ajax </tag>
            
            <tag> XMLHttpRequest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【2022-2023赛季FBA选秀巡礼】首轮前段篇</title>
      <link href="/2022/06/23/2022-2023-sai-ji-fba-xuan-xiu-xun-li-shou-lun-qian-duan-pian/"/>
      <url>/2022/06/23/2022-2023-sai-ji-fba-xuan-xiu-xun-li-shou-lun-qian-duan-pian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>阅前须知：</p><ol><li>数据评级规则：S[80%, 100%] A[60%, 80%) B[40%, 60%) C[20%, 40%) D[0%, 20%)</li><li>失误控制越出色，指场均失误越低（当然，对大多数大核来说，失误多是难免的）</li><li>某些数据（也许）会比另外一些数据更稀缺，例如普遍的观念里，盖帽比抢断更”值钱“</li><li>每个人的范特西价值观都不完全相同，<strong>一切以你为准</strong></li></ol></blockquote><h1 id="Rank1-Nikola-Jokic-x2F-C-x2F-Den"><a href="#Rank1-Nikola-Jokic-x2F-C-x2F-Den" class="headerlink" title="Rank1: Nikola Jokic &#x2F; C &#x2F; Den"></a>Rank1: Nikola Jokic &#x2F; C &#x2F; Den</h1><p><strong>数据雷达图：</strong></p><img src="【2022-2023赛季FBA选秀巡礼】首轮前段篇/1656137107426.png" alt="1656137107426" style="zoom:50%;" /><p><strong>数据评级：</strong></p><ul><li>出勤：S</li><li>篮板：S</li><li>命中率：S</li><li>得分：S</li><li>助攻：A</li><li>抢断：A</li><li>前板：A-</li><li>罚球命中率：B+</li><li>助失比：C+</li><li>盖帽：C</li><li>三分：C</li><li>失误控制：C-</li></ul><p><strong>评价：</strong></p><p>毫无疑问的状元：</p><ul><li>优秀的出勤；</li><li>队内绝对核心；</li><li>全能战士，没有会拖累队伍的项；</li><li>优秀的篮板、命中率、得分、助攻、抢断和前板；</li><li>场均Value和第2的差距约等于第2和第24的差距；</li><li>少打14场，赛季总Value仍是第一；</li></ul><p>不看好的理由（如果要说的话）：</p><ul><li>下赛季穆雷&#x2F;波特回归，约基奇的得分欲望可能会回落</li></ul><h1 id="Rank2-Dejounte-Murray-x2F-PG-x2F-SAS"><a href="#Rank2-Dejounte-Murray-x2F-PG-x2F-SAS" class="headerlink" title="Rank2: Dejounte Murray &#x2F; PG &#x2F; SAS"></a>Rank2: Dejounte Murray &#x2F; PG &#x2F; SAS</h1><p><strong>数据雷达图：</strong></p><img src="【2022-2023赛季FBA选秀巡礼】首轮前段篇/1656140302496.png" alt="1656140302496" style="zoom:50%;" /><p><strong>数据评级：</strong></p><ul><li>出勤：A+</li><li>抢断：S</li><li>助攻：S</li><li>助失比：A+</li><li>得分：A</li><li>篮板：B+</li><li>罚球命中率：B</li><li>失误控制：B-</li><li>命中率：C</li><li>三分：C</li><li>前板：C</li><li>盖帽：D</li></ul><p><strong>评价：</strong></p><p>相比于约状元的板上钉钉，榜眼的人选不同人有不同见解，我的个人倾向是穆雷：</p><ul><li>出勤不错；</li><li>年轻队伍的年轻头牌，且队内不存在竞争者；</li><li>优秀的抢断、助攻、助失比和得分；</li><li>年轻，不说能继续进步，起码稳定下来没啥问题，退步的可能性极小；</li></ul><p>不看好的理由（如果要说的话）：</p><ul><li>近几个赛季出勤都不是顶级，近三年场次分别是66、67、68</li></ul>]]></content>
      
      
      <categories>
          
          <category> FBA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FBA </tag>
            
            <tag> FBA选秀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HelloWorld</title>
      <link href="/2022/06/21/hello-world/"/>
      <url>/2022/06/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
